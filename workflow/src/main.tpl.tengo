// "hello world"
wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
ll := import("@platforma-sdk/workflow-tengo:ll")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")

filter := func(arr, predicate) {
	filtered := []
	for item in arr {
		if predicate(item) {
			filtered = append(filtered, item)
		}
	}
	return filtered
}

vjUsage := import(":vj-usage")
geneUsage := import(":x-usage")

wf.prepare(func(args) {
	bundleBuilder := wf.createPBundleBuilder()
	bundleBuilder.ignoreMissingDomains() // to make query work for both bulk and single cell data
	bundleBuilder.addAnchor("main", args.datasetRef)

	// abundance
	bundleBuilder.addSingle({
		axes: [{ anchor: "main", idx: 0 }, { anchor: "main", idx: 1 }],
		annotations: {
			"pl7.app/isAbundance": "true",
			"pl7.app/abundance/normalized": "false",
			"pl7.app/abundance/isPrimary": "true"
		}
	}, "abundance")

	// Add the V and J gene hit columns to the bundle.
	for gene in ["V", "J"] {
		geneLower := gene == "V" ? "v" : "j"
		
		// Base domain for gene hit
		domain := {
			"pl7.app/vdj/reference": gene + "Gene"
		}
		
		// for single cell data, we will get multiple chains, so we need to add them all
		// and then pick ones we need when resolved
		bundleBuilder.addMulti({
			axes: [{ anchor: "main", idx: 1 }],
			name: args.allele ? "pl7.app/vdj/geneHitWithAllele" : "pl7.app/vdj/geneHit",
			domain: domain
		},
		geneLower + "Gene")
	}

	return { 
		columns: bundleBuilder.build()
	}
})

wf.body(func(args) {
	columns := args.columns
	isSingleCell := args.columns.getSpec(args.datasetRef).axesSpec[1].name == "pl7.app/vdj/scClonotypeKey"

	vGeneCol := undefined
	jGeneCol := undefined
	if isSingleCell {
		predicate:= func(col) {
			return col.spec.domain["pl7.app/vdj/scClonotypeChain"] == args.scChain && col.spec.domain["pl7.app/vdj/scClonotypeChain/index"] == "primary"
		}
		vGeneCols := filter(columns.getColumns("vGene"), predicate)
		ll.assert(len(vGeneCols) == 1, "expected exactly 1 V gene column for chain, got %d", len(vGeneCols))
		vGeneCol = vGeneCols[0]
		
		jGeneCols := filter(columns.getColumns("jGene"), predicate)
		ll.assert(len(jGeneCols) == 1, "expected exactly 1 J gene column for chain, got %d", len(jGeneCols))
		jGeneCol = jGeneCols[0]
	} else {
		ll.assert(len(columns.getColumns("vGene")) == 1, "expected exactly 1 V gene column, got ", len(columns.getColumns("vGene")))
		ll.assert(len(columns.getColumns("jGene")) == 1, "expected exactly 1 J gene column, got ", len(columns.getColumns("jGene")))
		vGeneCol = columns.getColumns("vGene")[0]
		jGeneCol = columns.getColumns("jGene")[0]
	}

	
	vGeneSpec := vGeneCol.spec
	jGeneSpec := jGeneCol.spec
	abundanceSpec := columns.getSpec("abundance")

	table := pframes.tsvFileBuilder()

	table.setAxisHeader("pl7.app/sampleId", "sample")
	table.setAxisHeader(abundanceSpec.axesSpec[1].name, "clonotypeKey")
	table.add(vGeneCol, {header: "vGene"})
	table.add(jGeneCol, {header: "jGene"})
	table.add(columns.getColumn("abundance"), {header: "abundance"})
	tsv := table.build()

	vjUsage := vjUsage.vjUsage(vGeneSpec, jGeneSpec, abundanceSpec, tsv)
	vUsage := geneUsage.geneUsage("vGene", vGeneSpec, jGeneSpec, abundanceSpec, tsv)
	jUsage := geneUsage.geneUsage("jGene", vGeneSpec, jGeneSpec, abundanceSpec, tsv)

	// Make trace for provenance
	datasetSpec := columns.getSpec(args.datasetRef)
	trace := pSpec.makeTrace(datasetSpec,
		{
			type: "milaboratories.vj-gene-usage",
			importance: 45,
			label: "Gene Usage " + (args.allele ? " (allele)" : "(gene)")
		})

	pf := pframes.pFrameBuilder()
	for id, v in vjUsage {
		pf.add(id + "-vj", trace.inject(v.spec), v.data)
	}
	for id, v in vUsage {
		pf.add(id + "-v", trace.inject(v.spec), v.data)
	}
	for id, v in jUsage {
		pf.add(id + "-j", trace.inject(v.spec), v.data)
	}
	pf = pf.build()

	return {
		outputs: {
			pf: pframes.exportFrame(pf)
		},

		exports: {
			pf: pf
		}
	}
})

