// "hello world"
wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
ll := import("@platforma-sdk/workflow-tengo:ll")
pframes := import("@platforma-sdk/workflow-tengo:pframes")

vjUsage := import(":vj-usage")
geneUsage := import(":x-usage")

wf.prepare(func(args) {
	bundleBuilder := wf.createPBundleBuilder()
	bundleBuilder.ignoreMissingDomains() // to make query work for both bulk and single cell data
	bundleBuilder.addAnchor("main", args.datasetRef)

	// abundance
	bundleBuilder.addSingle({
		axes: [{ anchor: "main", idx: 0 }, { anchor: "main", idx: 1 }],
		annotations: {
			"pl7.app/isAbundance": "true",
			"pl7.app/abundance/normalized": "false",
			"pl7.app/abundance/isPrimary": "true"
		}
	}, "abundance")

	// Add the V and J gene hit columns to the bundle.
	for gene in ["V", "J"] {
		geneLower := gene == "V" ? "v" : "j"
		
		// Base domain for gene hit
		domain := {
			"pl7.app/vdj/reference": gene + "Gene"
		}
		
		// TODO: decide what will be done with multiple chains
		// For single cell data, without this ensures we get only the primary chain instead of multiple chains
		// Needed because resolving 2 columns from query gives error
		// For bulk data, these will be ignored
		domain["pl7.app/vdj/scClonotypeChain"] = "A"
		domain["pl7.app/vdj/scClonotypeChain/index"] = "primary"
		
		bundleBuilder.addSingle({
			axes: [{ anchor: "main", idx: 1 }],
			name: "pl7.app/vdj/geneHit",
			domain: domain
		},
		geneLower + "Gene")
	}

	return { 
		columns: bundleBuilder.build()
	}
})

wf.body(func(args) {
	columns := args.columns

	vGeneSpec := columns.getSpec("vGene")
	jGeneSpec := columns.getSpec("jGene")
	abundanceSpec := columns.getSpec("abundance")

	table := pframes.tsvFileBuilder()

	table.setAxisHeader("pl7.app/sampleId", "sample")
	table.setAxisHeader(abundanceSpec.axesSpec[1].name, "clonotypeKey")
	table.add(columns.getColumn("vGene"), {header: "vGene"})
	table.add(columns.getColumn("jGene"), {header: "jGene"})
	table.add(columns.getColumn("abundance"), {header: "abundance"})
	tsv := table.build()

	vjUsage := vjUsage.vjUsage(vGeneSpec, jGeneSpec, abundanceSpec, tsv)
	vUsage := geneUsage.geneUsage("vGene", vGeneSpec, jGeneSpec, abundanceSpec, tsv)
	jUsage := geneUsage.geneUsage("jGene", vGeneSpec, jGeneSpec, abundanceSpec, tsv)

	pf := pframes.pFrameBuilder()
	for id, v in vjUsage {
		pf.add(id + "-vj", v.spec, v.data)
	}
	for id, v in vUsage {
		pf.add(id + "-v", v.spec, v.data)
	}
	for id, v in jUsage {
		pf.add(id + "-j", v.spec, v.data)
	}
	pf = pf.build()

	return {
		outputs: {
			pf: pframes.exportFrame(pf)
		},

		exports: {
			pf: pf
		}
	}
})

