pt := import("@platforma-sdk/workflow-tengo:pt")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
ll := import("@platforma-sdk/workflow-tengo:ll")
specs := import(":specs")

calculateUsage := func(vGeneSpec, jGeneSpec, abundanceSpec, tsv) {
	wf := pt.workflow().
			 mem("16GiB"). // @TODO: set based on the size of the input
			 cpu(4)
	df := wf.frame(tsv, {xsvType: "tsv"})

	// VJ combined usage aggregation
	vjAggDf := df.
		groupBy("sample", "vGene", "jGene").
		agg(
			pt.col("abundance").sum().alias("sum"),
			pt.col("abundance").count().alias("count")
		)

	// V gene usage aggregation
	vAggDf := df.
		groupBy("sample", "vGene").
		agg(
			pt.col("abundance").sum().alias("sum"),
			pt.col("abundance").count().alias("count")
		)

	// J gene usage aggregation
	jAggDf := df.
		groupBy("sample", "jGene").
		agg(
			pt.col("abundance").sum().alias("sum"),
			pt.col("abundance").count().alias("count")
		)

	// Save all outputs
	vjAggDf.save("vj-output.tsv")
	vAggDf.save("v-output.tsv")
	jAggDf.save("j-output.tsv")

	// Run the workflow once
	agg := wf.run()

	// Process VJ results
	vjResult := xsv.importFile(
		agg.getFile("vj-output.tsv"),
		"tsv",
		{
			axes: [
				specs.sampleAxisSpec(abundanceSpec),
				specs.geneAxisSpec("vGene", vGeneSpec),
				specs.geneAxisSpec("jGene", jGeneSpec)
			],

			columns: [
				specs.vjUsageColumnSpec(true, abundanceSpec),
				specs.vjUsageColumnSpec(false, abundanceSpec)
			]
		},
		{ splitDataAndSpec: true }
	)

	// Process V gene results
	vResult := xsv.importFile(
		agg.getFile("v-output.tsv"),
		"tsv",
		{
			axes: [
				specs.sampleAxisSpec(abundanceSpec),
				specs.geneAxisSpec("vGene", vGeneSpec)
			],

			columns: [
				specs.geneUsageColumnSpec("vGene", true, abundanceSpec),
				specs.geneUsageColumnSpec("vGene", false, abundanceSpec)
			]
		},
		{ splitDataAndSpec: true }
	)

	// Process J gene results
	jResult := xsv.importFile(
		agg.getFile("j-output.tsv"),
		"tsv",
		{
			axes: [
				specs.sampleAxisSpec(abundanceSpec),
				specs.geneAxisSpec("jGene", jGeneSpec)
			],

			columns: [
				specs.geneUsageColumnSpec("jGene", true, abundanceSpec),
				specs.geneUsageColumnSpec("jGene", false, abundanceSpec)
			]
		},
		{ splitDataAndSpec: true }
	)

	return {
		vjUsage: vjResult,
		vUsage: vResult,
		jUsage: jResult
	}
}

export {
	calculateUsage: calculateUsage
} 